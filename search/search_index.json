{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>chromhandler</code> is a Python package which aims to streamline the data processing and analysis of chromatographic time-course and calibration experiments.  It can read peak area data from various formats, enrich it with metadata such as reaction time, temperature, pH, and initial concentrations of reaction components. Finally, the peaks of interest can be aggregated, concentrations calculated, and the time-course data for each analyte of interest transformed into an EnzymeML Document.</p> <pre><code>graph LR\n  AD[\ud83c\udf08 Chromatographic Instrument] --&gt; CAL\n  AD --&gt; RXN\n\n  subgraph \"\ud83d\udcc1experimental_data\"\n\n      CAL[\"&lt;div style='text-align:left;font-family:monospace'&gt;\n\ud83d\udcc2 calib_substrate&lt;br&gt;\n\u251c\u2500\u2500 mh1_10mM.json&lt;br&gt;\n\u251c\u2500\u2500 mh2_50mM.json&lt;br&gt;\n\u2514\u2500\u2500 mh3_90mM.json&lt;br&gt;&lt;br&gt;\n\ud83d\udcc2 calib_prod1&lt;br&gt;\n\u251c\u2500\u2500 prod1_10mM.json&lt;br&gt;\n\u251c\u2500\u2500 prod1_50mM.json&lt;br&gt;\n\u2514\u2500\u2500 prod1_90mM.json&lt;br&gt;&lt;br&gt;\n&lt;/div&gt;\"]\n\n      RXN[\"&lt;div style='text-align:left;font-family:monospace'&gt;\n\ud83d\udcc2 reaction_mh9&lt;br&gt;\n\u251c\u2500\u2500 mh9_1h.json&lt;br&gt;\n\u251c\u2500\u2500 mh9_2h.json&lt;br&gt;\n\u251c\u2500\u2500 mh9_3h.json&lt;br&gt;\n\u251c\u2500\u2500 mh9_4h.json&lt;br&gt;\n\u251c\u2500\u2500 mh9_5h.json&lt;br&gt;\n\u251c\u2500\u2500 mh9_6h.json&lt;br&gt;\n\u2514\u2500\u2500 mh9_12h.json\n&lt;/div&gt;\"]\n  end\n\n  CAL --&gt;|read| C_cal{\"&lt;span style='font-family:monospace'&gt;&lt;b&gt;chromatopy&lt;/b&gt;&lt;/span&gt;&lt;br&gt;\"}\n  RXN --&gt;|read| C_react{\"&lt;span style='font-family:monospace'&gt;&lt;b&gt;chromatopy&lt;/b&gt;&lt;/span&gt;&lt;br&gt;\"}\n\n  cal1[\"&lt;div style='text-align:left'&gt;\nDefine measured molecules&lt;br&gt;\n\u2013 retention time&lt;br&gt;\n\u2013 PubChem CID\n&lt;/div&gt;\"]\n\n  cal2[\"&lt;div style='text-align:left'&gt;\nCreate calibration standard\n&lt;/div&gt;\"]\n\n  E4[\"Define reaction conditions\"]\n  E3[\"Add measured molecules\"]\n  E5[\"Define enzymes\"]\n  Enz[\ud83d\udcc4 EnzymeML Document]\n\n  subgraph \"Calibration mode\"\n    C_cal --&gt; cal1\n    cal1 --&gt; cal2\n  end\n\n  subgraph \"Reaction mode\"\n    C_react --&gt; E4\n    E4 --&gt; E3\n    E3 --&gt; E5\n    cal2 --&gt; E3\n  end\n\n  E5 --&gt;|convert| Enz\n</code></pre> <p>For some output formats, <code>chromhandler</code> provides a direct interface to read in data. For more information on the supported file formats and data preparation to use the <code>chromhandler</code> workflow, refer to the data preparation section.</p>"},{"location":"#key-features","title":"\u2b50 Key Features","text":"<ul> <li>\ud83c\udf31 Low friction data processing  Leave behind data processing in spreadsheet applications and directly start with data analysis based on raw data.</li> <li>\ud83e\uddea Enrich reaction data with metadata Assign metadata like initial concentrations of reactants, temperature, pH, etc. to reaction data to yield modeling-ready data.</li> <li>\ud83d\udcc8 Create and apply calibration curves Create calibrators for your analytes and use them throughout your data analysis for seamless concentration calculation.</li> <li>\ud83d\udcc2 FAIR data Transform your data into EnzymeML format for subsequent analysis pipelines.</li> </ul>"},{"location":"#installation","title":"\ud83d\udee0\ufe0f Installation","text":"<p>Install <code>chromhandler</code> using <code>pip</code>:</p> <pre><code>pip install chromhandler\n</code></pre> <p>or from source:</p> <pre><code>pip install git+https://github.com/FAIRChemistry/chromhandler.git\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#chromatopy","title":"\ud83d\udc0d <code>chromatopy</code>","text":"<p><code>chromatopy</code> can be installed using <code>pip</code>:</p> <pre><code>pip install chromatopy # \ud83d\udea7 not released yet\n</code></pre> <p>or from source:</p> <pre><code>pip install git+https://github.com/FAIRChemistry/chromatopy.git\n</code></pre> <p>If you are within a Jupyter Notebook, you can install the package by executing the following cell:</p> <pre><code>!pip install chromatopy\n</code></pre>"},{"location":"installation/#openchrome-from-lablicate","title":"\ud83d\udda5\ufe0f OpenChrome (from Lablicate)","text":"<p>Info</p> <p>OpenChrome is an open source software for chromatography, spectrometry and spectroscopy. Its focus is on handling data files from various instruments natively. Hence, chromatographic data, generated by GC/MS, GC/FID, HPLC-DAD and other techniques, may be imported directly, without prior conversion, for subsequent visualization and evaluation. Furthermore, OpenChrom is able to export analyzed data to the JSON-based and vendor-independent, Allotrope Simple Model (ASM) format. This format allows subsequent data processing with <code>chromatopy</code> in Python.  </p>"},{"location":"installation/#download-openchrom","title":"Download OpenChrom","text":"<p>Download the latest version of OpenChrom from the official website.</p>"},{"location":"installation/#install-plug-ins","title":"Install plug-ins","text":"<p>For reading in data from various vendors, OpenChrom provides a set of plug-ins. For installation, navigate to <code>Plug-ins</code> &gt; <code>Install Converters</code> in the main menu. Then, type the name of the vendor (e.g., Agilent, Waters, Shimadzu) in the search bar and install the corresponding import plug-ins.  For later file export, search for <code>asm</code> and install the export plug-in. </p>"},{"location":"supported_formats/","title":"Data Preparation","text":"<p><code>chromhandler</code> supports two fundamental analysis workflows:</p> <p>\ud83c\udfaf Calibration Mode - Purpose: Create calibration curves from standard samples - Input: Peak tables of standard samples - Output: Calibration models for concentration calculation - Typical use: External standards, method validation  </p> <p>\u23f1\ufe0f Timecourse Mode - Purpose: Track analyte concentrations over time - Input: Peak tables of reaction mixtures at different time points - Output: Time-resolved concentration data, EnzymeML documents - Typical use: Enzyme kinetics, reaction monitoring  </p> <p>For facilitating swift processing of data, it has to be organized in a specific way.</p>"},{"location":"supported_formats/#data-organization","title":"\ud83d\udcc2 Data organization","text":"<p><code>chromhandler</code> requires a specific organization of the measurement data of a time-course or calibration series. The scope of one analysis run is therefore eighter a single sample which is measured over time or a calibration series with multiple samples for different concentrations. </p> <p>Example</p> <p>An exemplary consisting of calibration mensurements and time-course data should be organized as follows: <pre><code>\ud83d\udcc2 Project\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 Calibration\n\u2502   \u251c\u2500\u2500 abts_1uM.json\n\u2502   \u251c\u2500\u2500 abts_50uM.json\n\u2502   \u2514\u2500\u2500 abts_300uM.json\n\u2502\n\u2514\u2500\u2500 \ud83d\udcc2 B002\n    \u251c\u2500\u2500 B002_12h.json\n    \u251c\u2500\u2500 B002_24h.json\n    \u2514\u2500\u2500 B002_36h.json\n</code></pre></p>"},{"location":"supported_formats/#calibration-data","title":"Calibration data","text":"<ul> <li>The set of calibration data files should be stored within a single folder.</li> <li>Deposit the concentration including the unit in the file name. E.g. <code>abts_1uM.json</code> <code>abts_50uM.json</code> <code>abts_300uM.json</code>. In this case the concentration can be automatically extracted from the file name.</li> </ul>"},{"location":"supported_formats/#time-course-data","title":"Time-course data","text":"<ul> <li>All data files of a time-course series should be stored within a single folder.</li> <li>Name the folder after your sample ID. E.g. <code>B002</code>.</li> <li>Deposit the reaction time including the unit in the file name. E.g. <code>B002_12h.json</code> <code>B002_24h.json</code> <code>B002_36h.json</code>. This allows to automatically extract the reaction time and unit from the file name.</li> </ul>"},{"location":"supported_formats/#supported-formats","title":"\ud83d\udd27 Supported Formats","text":"<p>Most output data from chromatographic devices is vendor-specific and proprietary. However, OpenChrom, an open-source software that is free for academic use, provides the tools to convert proprietary data from almost all vendors into a vendor-neutral and machine-readable format, specifically the Allotrope Simple Model (ASM). A complete list of supported formats for pre-processing with OpenChrom can be found here.</p> <p>Peak detection and integration with subsequent export to the ASM format is the recommended way to prepare data for subsequent processing with <code>chromhandler</code>. For information on how to batch process chromatographic data with OpenChrom, please refer to the section Spectrum Processing with OpenChrom.</p>"},{"location":"supported_formats/#allotrope-simple-model","title":"Allotrope Simple Model","text":"<p>Info</p> <p>The Allotrope Simple Model (ASM) is a JSON-based and vendor-independent format for analytical data. It is designed to store chromatographic measurement data.</p> <p>The ASM format is the preferred format for data import. It can be exported from OpenChrom and contains the measured signal and data of all peaks which were processed by OpenChrom. The format is supported by <code>chromhandler</code> and can be imported directly.</p>"},{"location":"supported_formats/#vendor-specific-formats","title":"Vendor specific formats","text":"<p>As an alternative to the ASM format, <code>chromhandler</code> supports the import of chromatographic data from various vendors.  Samples of all supported formats are provided below.</p> File Examples Agilent REPORT.TXTAgilent RESULTS.CSVAgilent rdl formatted *.TXTShimadzu *.TXTThermo Fisher Scientific *.TXT <pre><code>Data File C:\\CHEM32\\1\\DATA\\H 2023-07-24 21-36-55\\001F0104.D\nSample Name: DFA-708-01\nInstrument 1 7/24/2023 10:34:06 PM Group\n\n=====================================================================\nAcq. Operator   : Group                           Seq. Line :   1\nAcq. Instrument : Instrument 1                    Location : Vial 1\nInjection Date  : 7/24/2023 10:22:05 PM                Inj :   4\n                                                Inj Volume : 1000 \u00b5l\nSequence File   : C:\\Chem32\\1\\DATA\\07-24 21-36-55\\H.S\nMethod          : C:\\CHEM32\\1\\DATA\\07-24 21-36-55\\H.M (\n                Sequence Method)\nLast changed    : 7/24/2023 4:35:09 PM\n=====================================================================\n                        Area Percent Report                         \n=====================================================================\n\nSorted By             :      Signal\nMultiplier            :      1.0000\nDilution              :      1.0000\nUse Multiplier &amp; Dilution Factor with ISTDs\n\n\nSignal 1: FID1 A, \n\nPeak RetTime Type  Width     Area      Height     Area  \n#   [min]        [min]   [pA*s]      [pA]         %\n----|-------|----|-------|----------|----------|--------|\n1   2.828 BB    0.0857 1.95364e4  3417.83057 99.52651\n2   4.059 BB    0.0745   92.94276   18.85831  0.47349\nTotals :                  1.96294e4  3436.68888\n\n\nSignal 2: TCD2 B, \n\nPeak RetTime Type  Width     Area      Height     Area  \n#   [min]        [min]  [25 uV*s]   [25 uV]       %\n----|-------|----|-------|----------|----------|--------|\n1   2.832 BB    0.0841 1090.67725  195.31581 1.000e2 \nTotals :                  1090.67725  195.31581\n\n=====================================================================\n                        Summed Peaks Report                         \n=====================================================================\n\nSignal 1: FID1 A, \nSignal 2: TCD2 B, \n=====================================================================\n                    Final Summed Peaks Report                      \n=====================================================================\n\nSignal 1: FID1 A, \nSignal 2: TCD2 B, \n                        *** End of Report ***\n</code></pre> <pre><code>[contents]\ncount=1\nName=,D:\\MassHunter\\GCMS\\RAU-R505-0.D\n1=,INT TIC: RAU-R505-0.D\\data.ms\n[INT TIC: RAU-R505-0.D\\data.ms]\nTime=,Thu Jun 06 17:25:48 2024\nHeader=,\"Peak\",\"R.T.\",\"First\",\"Max\",\"Last\",\"PK  TY\",\"Height\",\"Area\",\"Pct Max\",\"Pct Total\"\n1=,  1,  6.056,  856, 860, 880,\"  M \",1366398, 13751453,100.00, 63.328\n2=,  2,  6.302,  899, 903, 909,\"  M \",1063632,  7963360, 57.91, 36.672\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Cross Sequence Summary Report                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Sample Name     \u2502M2_MJ_                                                    \u2502\n\u2502                \u2502100_min                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Signal:\u2502DAD1A,Sig=254,4  Ref=360,100                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    RT \u2502Typ\u2502  Width \u2502   Area \u2502 Height\u2502  Area% \u2502Name                         \u2502\n\u2502 [min] \u2502e  \u2502  [min] \u2502        \u2502       \u2502        \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0.698 \u2502BV \u2502 0.4062 \u2502    53. \u2502 7.2642\u2502 0.3671 \u2502                             \u2502\n\u2502       \u2502   \u2502        \u2502   0992 \u2502       \u2502        \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1.169 \u2502VV \u2502 0.8468 \u2502  6094. \u2502   783.\u2502    42. \u2502AMP@1,169min                 \u2502\n\u2502       \u2502   \u2502        \u2502   3336 \u2502   0775\u2502   1289 \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2.756 \u2502VB \u2502 0.4315 \u2502    14. \u2502 1.9341\u2502 0.0982 \u2502                             \u2502\n\u2502       \u2502   \u2502        \u2502   2114 \u2502       \u2502        \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3.331 \u2502BV \u2502 0.7823 \u2502  7620. \u2502   925.\u2502    52. \u2502ADP@3,327min                 \u2502\n\u2502       \u2502   \u2502        \u2502   7030 \u2502   5433\u2502   6804 \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3.974 \u2502VB \u2502 1.5648 \u2502   381. \u2502    55.\u2502 2.6397 \u2502                             \u2502\n\u2502       \u2502   \u2502        \u2502   8593 \u2502   0016\u2502        \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 5.770 \u2502BB \u2502 1.0452 \u2502   301. \u2502    22.\u2502 2.0856 \u2502ATP@5,720min                 \u2502\n\u2502       \u2502   \u2502        \u2502   7014 \u2502   1066\u2502        \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       \u2502   \u2502    Sum \u2502 14465. \u2502       \u2502        \u2502                             \u2502\n\u2502       \u2502   \u2502        \u2502   9079 \u2502       \u2502        \u2502                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502D:\\CDSProjects\\JNS\\Report  \u2502     Printed:  2024-10-20       \u2502    Page 1 of 1  \u2502\n\u2502Templates\\Export_for_      \u2502        16:25:44+02:00          \u2502                 \u2502\n\u2502python.rdl [Rev. 2.0]      \u2502                                \u2502                 \u2502\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n</code></pre> <pre><code>[Header]\nApplication Name,LCsolution\nVersion,1.25\nData File Name,C:\\LabSolutions\\0.lcd\nOutput Date,12.12.2023.\nOutput Time,11:18:30\n\n[File Information]\nType,Data File\nGenerated,21.2.2012. 13:16:32\nGenerated by,Admin\nModified,21.2.2012. 13:33:38\nModified by,Admin\n\n[Sample Information]\nOperator Name,Admin\nAcquired,21.2.2012. 13:16:57\nSample Type,0:Unknown\nLevel,0\nSample Name,0\nSample ID,\nISTD Amount 1,1\nISTD Amount 2,1\nISTD Amount 3,1\nISTD Amount 4,1\nISTD Amount 5,1\nISTD Amount 6,1\nISTD Amount 7,1\nISTD Amount 8,1\nISTD Amount 9,1\nISTD Amount 10,1\nISTD Amount 11,1\nISTD Amount 12,1\nISTD Amount 13,1\nISTD Amount 14,1\nISTD Amount 15,1\nISTD Amount 16,1\nISTD Amount 17,1\nISTD Amount 18,1\nISTD Amount 19,1\nISTD Amount 20,1\nISTD Amount 21,1\nISTD Amount 22,1\nISTD Amount 23,1\nISTD Amount 24,1\nISTD Amount 25,1\nISTD Amount 26,1\nISTD Amount 27,1\nISTD Amount 28,1\nISTD Amount 29,1\nISTD Amount 30,1\nISTD Amount 31,1\nISTD Amount 32,1\nSample Amount,1\nDilution Factor,1\nVial#,1\nInjection Volume,20\n\n[Original Files]\nData File,C:\\LabSolutions\nMethod File,C:\\LabSolutions\nBatch File,C:\\LabSolutions\nReport Format File,C:\\LabSolutions\nTuning File,\n\n[File Description]\n\n\n[Configuration]\n# of Detectors,2\nDetector ID,Detector A,AD2\nDetector Name,Detector A,AD2\n# of Channels,1,1\n\n[Peak Table(Detector A-Ch1)]\n# of Peaks,14\nPeak#,R.Time,I.Time,F.Time,Area,Height,A/H,Conc.,Mark,ID#,Name,k',Plate #,Plate Ht.,Tailing,Resolution,Sep.Factor,Conc. %,Norm Conc.\n1,0.143,0.017,0.342,1278,107,11.9230,0.0000,   ,,,0.000,4,41558.735,1.160,0.000,0.000,0.0000,0.0000\n2,2.677,2.600,2.842,7633,868,8.7930,0.0000,   ,,,17.675,2267,66.156,1.540,9.621,0.000,0.0000,0.0000\n3,3.113,2.867,3.492,74069,3235,22.8950,0.0000,   ,,,20.715,284,528.740,0.000,0.904,1.172,0.0000,0.0000\n4,3.674,3.492,4.225,62448,1896,32.9390,0.0000, V ,,,24.632,195,767.696,0.000,0.627,1.189,0.0000,0.0000\n5,4.541,4.225,4.858,61821,2075,29.7890,0.0000, V ,,,30.681,11,13168.368,0.000,0.270,1.246,0.0000,0.0000\n6,5.264,4.858,6.025,591150,23289,25.3830,0.0000, V ,,,35.719,1559,96.223,0.000,0.244,1.164,0.0000,0.0000\n7,6.234,6.025,6.417,69898,3040,22.9950,0.0000, V ,,,42.488,8,18539.786,0.000,0.209,1.189,0.0000,0.0000\n8,6.570,6.417,6.708,51229,2962,17.2940,0.0000, V ,,,44.832,6,27270.488,0.000,0.034,1.055,0.0000,0.0000\n9,7.099,6.708,7.442,271461,9085,29.8790,0.0000, V ,,,48.524,1106,135.634,0.000,0.088,1.082,0.0000,0.0000\n10,8.063,7.442,8.950,2838883,74297,38.2100,0.0000, V ,1,RT8.063,55.243,1156,129.804,0.000,1.069,1.138,0.0000,0.0000\n11,9.083,8.950,10.367,458569,7811,58.7060,0.0000, V ,,,62.362,26,5780.190,0.000,0.253,1.129,0.0000,0.0000\n12,10.392,10.367,11.067,150804,3848,39.1900,0.0000, V ,,,71.492,1,157400.235,0.000,0.053,1.146,0.0000,0.0000\n13,11.391,11.067,12.442,273652,3881,70.5040,0.0000, V ,,,78.463,96,1566.775,0.000,0.042,1.098,0.0000,0.0000\n14,12.567,12.442,14.967,184099,2616,70.3870,0.0000, V ,,,86.664,13,11724.488,0.000,0.126,1.105,0.0000,0.0000\n\n[Peak Table(AD2)]\n# of Peaks,0\n\n[Peak Table(PDA-Ch1)]\n# of Peaks,0\n\n[Compound Results(Detector A)]\n# of IDs,1\nID#,Name,R.Time,Area,Height,Conc.,Curve,3rd,2nd,1st,Constant,Conc. %,Norm Conc.\n1,RT8.063,8.063,2838883,74297,0.0000,Linear,0.0,0.0,0.0,0.0,0.0000,0.0000\n\n[Compound Results(AD2)]\n# of IDs,0\n\n[Compound Results(PDA)]\n# of IDs,0\n\n[Group Results(Detector A)]\n# of Groups,0\n\n[Group Results(AD2)]\n# of Groups,0\n\n[Group Results(PDA)]\n# of Groups,0\n\n[LC Chromatogram(Detector A-Ch1)]\nInterval(msec),500\n# of Points,1801\nStart Time(min),0.000\nEnd Time(min),15.000\nIntensity Units,mV\nIntensity Multiplier,0.001\nWavelength(nm),215\nR.Time (min),Intensity\n0.00000,-132\n0.00833,-132\n0.01667,-52\n0.02500,3\n0.03333,8\n...\n</code></pre> <pre><code>Filepath    C:\u00a5Chromel\u00a5data\u00a5HPLC\u00a52_Data\u00a5UV_VIS_1.CHL\u00a520.acd\nChannel UV_VIS_1\n\nSample Information:\nDatasource  BCI\nSequence    HPLC\u00a52_Data\nSample  A 1,0 mM\nSample Number   31\nSample Position RD3\nSample ID   20\nComment \nQNT method  20211221\nPGM file    20230109\nType    standard\nStatus  finished\nDate    02.02.2023\nTime    16:12:23\nInjection Volume (\uff75l)   10,00\nDilution Factor 1,000000\nAmount  1,000000\nWeight  1,000000\n\nRaw Data Header Information:\nTime Min. (min) 0,000\nTime Max. (min) 44,000\nRaw-Time Min. (min) 0,000\nRaw-Time Max. (min) 44,000\nData Points 26401\nDetector    VWD3000.dll\nPreferred Read Mode Unknown\nWrite Mode  Unknown\nData System Chromeleon\nVersion High    06\nVersion Low 80\nBuild No.   3160\nFile Format Version 11\nGeneration Type 8\nFile ID 239054205\nFile Status 16\nGUID    8ce9b975\nSignal Factor   0,000010\nSignal Dimension    mAU\nSignal Unit Absorbance\nSignal Min. -2,8254\nSignal Max. 576,766300\nChannel Name    UV_VIS_1\nDriver Name VWD-3x00(RS) Detector\nMin. Step   10\nMax. Step   10\nAverage Step    10\n\nSignal Parameter Information:\nSignal Info WVL:254 nm\nWavelength  254 nm\n\nRaw Data:\nTime(min)   Step(sec)   Value(mAU)\n0,000000    0,00    0,125090    \n0,001667    0,10    0,125010    \n0,003333    0,10    0,124540    \n0,005000    0,10    0,124710    \n0,006667    0,10    0,123320    \n0,008333    0,10    0,123160    \n...\n</code></pre>"},{"location":"supported_formats/#spectrum-processing-with-openchrom-from-lablicate","title":"\ud83c\udf08 Spectrum Processing with OpenChrom (from\u202fLablicate)","text":"<p>Info</p> <p>OpenChrom is an open\u2011source application for chromatography, spectrometry and spectroscopy. It natively imports data from most GC/MS, GC/FID, HPLC\u2011DAD and related instruments, offers high\u2011throughput batch processing (baseline correction, peak detection/integration, reporting) and exports results to the vendor\u2011independent Allotrope\u202fSimple\u202fModel\u202f(ASM) format\u2014ready for use with <code>chromhandler</code>.</p>"},{"location":"supported_formats/#installation-plugin-setup","title":"Installation\u202f&amp;\u202fplug\u2011in setup","text":"<ol> <li>Download the current OpenChrom release from the official site and install it.</li> <li>Activate the Allotrope Simple Model (ASM) plugin (free for academic use) to export the data in the ASM format.</li> <li>Add import converters \u2013 in OpenChrom choose <code>Plug\u2011ins\u202f\u279c\u202fInstall\u202fConverters</code>, search for your vendor (e.g. Agilent, Waters, Shimadzu) and install the matching plug\u2011ins.    For ASM export, search for asm and install the Allotrope\u202fSimple\u202fModel plug\u2011in. </li> </ol>"},{"location":"supported_formats/#batch-processing","title":"Batch processing","text":"<ol> <li> <p>Open OpenChrom and navigate to <code>Chromatogram</code> &gt; <code>Batch Process</code>.</p> </li> <li> <p>A new window will open, where you need to specify a new Project. Afterwards, a name for the Batch Process can be defined.</p> </li> <li> <p>Now the Chromatogram Batch Process mode needs to be defined. Depending on you data, one of the following modes can be selected. The processing might fail if the wrong mode is selected.</p> <ul> <li><code>WSD</code>: Wavelength Spectrum Data</li> <li><code>MSD</code>: Mass Spectrum Data</li> <li><code>CSD</code></li> <li><code>VSD</code></li> </ul> </li> <li> <p>Now a Batch Job window is opened. The window is divided into the left side, where files can be added, and the right side, where the processing steps can be defined.</p> </li> <li> <p>Add the files you want to process by clicking on the  icon in the bottom of the left side. The files can be selected from the file system. </p> </li> <li> <p>Add proccessing steps by clicking on the  icon in the bottom of the right side. The following steps are recommended for peak processing and can be added with default parameters:</p> <ul> <li><code>Baseline Detector</code> &gt; <code>SNIP</code></li> <li><code>Peak Detector</code> &gt; <code>First Derivative</code></li> <li><code>Peak Integrator</code> &gt; <code>Peak Integrator Trapezoid</code></li> <li><code>Chromatogram Export</code> &gt; <code>ASM ... (*.json)</code> then define the output folder.</li> </ul> </li> <li> <p>Run the batch process by clicking on the Execute  icon in the top right corner. </p> </li> <li> <p>After the processing is finished, the data can be imported with <code>chromhandler</code>.</p> </li> </ol>"},{"location":"supported_formats/#what-if-my-data-cannot-be-processed-with-openchrom","title":"What if my data cannot be processed with OpenChrom?","text":"<p>If the OpenChrom converter for your data does not work as expected, please check the OpenChroms Issues, if it is a known issue. If not, consider submitting an issue to the OpenChrom repository.</p>"},{"location":"api_reference/handler/","title":"Handler","text":""},{"location":"api_reference/handler/#documentation-for-handler","title":"Documentation for <code>Handler</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.__call__","title":"<code>__call__()</code>","text":"<p>Make the Handler callable to display rich visualization.</p> <p>This allows you to use: Handler() to get the full rich display.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.__rich__","title":"<code>__rich__()</code>","text":"<p>Rich representation for automatic display in rich-aware contexts.</p> <p>This method is called automatically when you: - print(Handler) in a rich-enabled terminal - Display Handler in Jupyter notebooks - Use Handler in any rich-aware context</p> <p>Returns:</p> Name Type Description <code>Group</code> <code>Group</code> <p>A rich group with the full Handler visualization.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.add_molecule","title":"<code>add_molecule(molecule, init_conc=None, conc_unit=None, retention_tolerance=None, min_signal=0.0, auto_assign=False)</code>","text":"<p>Adds a molecule to the list of species, allowing to update the initial concentration, concentration unit, and retention time tolerance.</p> <p>Parameters:</p> Name Type Description Default <code>molecule</code> <code>Molecule</code> <p>The molecule object to be added.</p> required <code>init_conc</code> <code>float | None</code> <p>The initial concentration of the molecule. Defaults to None.</p> <code>None</code> <code>conc_unit</code> <code>UnitDefinitionAnnot | None</code> <p>The unit of the concentration. Defaults to None.</p> <code>None</code> <code>retention_tolerance</code> <code>float | None</code> <p>Retention time tolerance for peak annotation in minutes. Defaults to None.</p> <code>None</code> <code>min_signal</code> <code>float</code> <p>Minimum signal threshold for peak assignment. Peaks must have an area &gt;= this value to be assigned to this molecule. Defaults to 0.0 (no minimum threshold).</p> <code>0.0</code> <code>auto_assign</code> <code>bool</code> <p>If True, automatically assigns peaks after adding molecule. Set to False to add molecules without assignment for later consolidated reporting. Defaults to False.</p> <code>False</code>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.add_molecule_from_standard","title":"<code>add_molecule_from_standard(standard, init_conc, conc_unit)</code>","text":"<p>Adds a molecule to the list of species based on a <code>Calibration</code> object.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.add_protein","title":"<code>add_protein(protein, init_conc=None, conc_unit=None)</code>","text":"<p>Adds a protein to the list of proteins or updates an existing protein based on the pubchem_cid of the molecule.</p> <p>Parameters:</p> Name Type Description Default <code>protein</code> <code>Protein</code> <p>The protein object to be added.</p> required"},{"location":"api_reference/handler/#chromhandler.handler.Handler.add_standard","title":"<code>add_standard(molecule, wavelength=None, visualize=True)</code>","text":"<p>Creates a standard curve for a molecule based on the peak areas and concentrations.</p> <p>Parameters:</p> Name Type Description Default <code>molecule</code> <code>Molecule</code> <p>The molecule for which the standard curve should be created.</p> required <code>wavelength</code> <code>float | None</code> <p>The wavelength of the detector. Defaults to None.</p> <code>None</code> <code>visualize</code> <code>bool</code> <p>If True, the standard curve is visualized. Defaults to True.</p> <code>True</code>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.assign_all_peaks","title":"<code>assign_all_peaks(silent_individual=True)</code>","text":"<p>Assign peaks for all molecules and display a consolidated report.</p> <p>Parameters:</p> Name Type Description Default <code>silent_individual</code> <code>bool</code> <p>If True, suppress individual molecule output (default: True).</p> <code>True</code>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.define_molecule","title":"<code>define_molecule(id, pubchem_cid, retention_time, retention_tolerance=0.1, init_conc=None, conc_unit=None, name=None, wavelength=None, is_internal_standard=False, min_signal=0.0, auto_assign=False)</code>","text":"<p>Defines and adds a molecule to the list of molecules.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Internal identifier of the molecule, such as <code>s0</code> or <code>asd45</code>.</p> required <code>pubchem_cid</code> <code>int</code> <p>PubChem CID of the molecule, which uniquely identifies the compound.</p> required <code>retention_time</code> <code>Optional[float]</code> <p>Retention time for peak annotation in minutes. If the molecule is not detected in the chromatograms, this can be set to None.</p> required <code>retention_tolerance</code> <code>float</code> <p>Tolerance in minutes for retention time used in peak annotation. Defaults to 0.1.</p> <code>0.1</code> <code>init_conc</code> <code>Optional[float]</code> <p>Initial concentration of the molecule. If not provided, it defaults to None.</p> <code>None</code> <code>conc_unit</code> <code>Optional[str]</code> <p>Unit of the initial concentration. If not provided, it defaults to None.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Name of the molecule. If not provided, the name is fetched from the PubChem database. Defaults to None.</p> <code>None</code> <code>wavelength</code> <code>Optional[float]</code> <p>Wavelength of the detector where the molecule was detected. If not provided, it defaults to None.</p> <code>None</code> <code>is_internal_standard</code> <code>bool</code> <p>If True, the molecule is used as internal standard. Defaults to False.</p> <code>False</code> <code>min_signal</code> <code>float</code> <p>Minimum signal threshold for peak assignment. Peaks must have an area &gt;= this value to be assigned to this molecule. Defaults to 0.0 (no minimum threshold).</p> <code>0.0</code> <code>auto_assign</code> <code>bool</code> <p>If True, automatically assigns peaks after defining molecule. Set to False to define molecules without assignment for later consolidated reporting. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Molecule</code> <code>Molecule</code> <p>The molecule object that was added to the list of species.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.define_protein","title":"<code>define_protein(id, name, init_conc, conc_unit, sequence=None, organism=None, organism_tax_id=None, constant=True)</code>","text":"<p>Adds a protein to the list of proteins or updates an existing protein based on the pubchem_cid of the molecule.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Internal identifier of the protein such as <code>p0</code> or <code>asd45</code>.</p> required <code>name</code> <code>str</code> <p>Name of the protein.</p> required <code>init_conc</code> <code>float</code> <p>Initial concentration of the protein.</p> required <code>conc_unit</code> <code>str</code> <p>Unit of the concentration.</p> required <code>sequence</code> <code>str</code> <p>Amino acid sequence of the protein. Defaults to None.</p> <code>None</code> <code>organism</code> <code>str</code> <p>Name of the organism. Defaults to None.</p> <code>None</code> <code>organism_tax_id</code> <code>int</code> <p>NCBI taxonomy ID of the organism. Defaults to None.</p> <code>None</code> <code>constant</code> <code>bool</code> <p>Boolean indicating whether the protein concentration is constant. Defaults to True.</p> <code>True</code>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.from_json","title":"<code>from_json(path)</code>  <code>classmethod</code>","text":"<p>Load an instance of the class from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The file path to the JSON file.</p> required <p>Returns:</p> Type Description <code>Handler</code> <p>An instance of the class populated with data from the JSON file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified file does not exist.</p> <code>JSONDecodeError</code> <p>If the file contains invalid JSON.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.read_agilent","title":"<code>read_agilent(path, ph, temperature, temperature_unit='Celsius', mode=None, values=None, unit=None, id=None, name='Chromatographic measurement', silent=False)</code>  <code>classmethod</code>","text":"<p>Reads Agilent <code>Report.txt</code> or <code>RESULTS.csv</code> files within a <code>*.D</code> directories within the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to the directory containing the Agilent files.</p> required <code>ph</code> <code>float</code> <p>pH value of the measurement.</p> required <code>temperature</code> <code>float</code> <p>Temperature of the measurement.</p> required <code>temperature_unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the temperature. Defaults to Celsius (C).</p> <code>'Celsius'</code> <code>mode</code> <code>Optional[Literal['timecourse', 'calibration']]</code> <p>Mode of the data. If \"timecourse\", <code>values</code> should be a list of reaction times. If \"calibration\", <code>values</code> should be a list of concentrations. Defaults to None.</p> <code>None</code> <code>values</code> <code>list[float]</code> <p>A list of reaction times (for \"timecourse\" mode) or concentrations (for \"calibration\" mode), corresponding to each measurement in the directory.</p> <code>None</code> <code>unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the <code>values</code> provided. It can be the time unit for reaction times or the concentration unit for calibration mode, depending on the mode.</p> <code>None</code> <code>id</code> <code>str</code> <p>Unique identifier of the Handler object. If not provided, the <code>path</code> is used as ID.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the measurement. Defaults to \"Chromatographic measurement\".</p> <code>'Chromatographic measurement'</code> <code>silent</code> <code>bool</code> <p>If True, no success message is printed. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Handler</code> <code>Handler</code> <p>Handler object containing the measurements.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.read_asm","title":"<code>read_asm(path, ph, temperature, temperature_unit='Celsius', mode=None, values=None, unit=None, id=None, name='Chromatographic measurement', silent=False)</code>  <code>classmethod</code>","text":"<p>Reads chromatographic data from a directory containing Allotrope Simple Model (ASM) json files. Measurements are assumed to be named alphabetically, allowing sorting by file name.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to the directory containing the ASM files.</p> required <code>ph</code> <code>float</code> <p>pH value of the measurement.</p> required <code>temperature</code> <code>float</code> <p>Temperature of the measurement.</p> required <code>temperature_unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the temperature. Defaults to Celsius (C).</p> <code>'Celsius'</code> <code>mode</code> <code>Optional[Literal['timecourse', 'calibration']]</code> <p>Mode of the data. If \"timecourse\", <code>values</code> should be a list of reaction times. If \"calibration\", <code>values</code> should be a list of concentrations. Defaults to None.</p> <code>None</code> <code>values</code> <code>list[float]</code> <p>A list of reaction times (for \"timecourse\" mode) or concentrations (for \"calibration\" mode), corresponding to each measurement in the directory.</p> <code>None</code> <code>unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the <code>values</code> provided. It can be the time unit for reaction times or the concentration unit for calibration mode, depending on the mode.</p> <code>None</code> <code>id</code> <code>str</code> <p>Unique identifier of the Handler object. If not provided, the <code>path</code> is used as ID.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the measurement. Defaults to \"Chromatographic measurement\".</p> <code>'Chromatographic measurement'</code> <code>silent</code> <code>bool</code> <p>If True, no success message is printed. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Handler</code> <code>Handler</code> <p>Handler object containing the measurements.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.read_chromeleon","title":"<code>read_chromeleon(path, ph, temperature, temperature_unit='Celsius', mode=None, values=None, unit=None, id=None, name='Chromatographic measurement', silent=False)</code>  <code>classmethod</code>","text":"<p>Reads Chromeleon txt files from a directory. The files in the directory are assumed to be of one calibration or timecourse measurement series.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to the directory containing the Chromeleon files.</p> required <code>ph</code> <code>float</code> <p>pH value of the measurement.</p> required <code>temperature</code> <code>float</code> <p>Temperature of the measurement.</p> required <code>temperature_unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the temperature. Defaults to Celsius (C).</p> <code>'Celsius'</code> <code>mode</code> <code>Optional[Literal['timecourse', 'calibration']]</code> <p>Mode of the data. If \"timecourse\", <code>values</code> should be a list of reaction times. If \"calibration\", <code>values</code> should be a list of concentrations. Defaults to None.</p> <code>None</code> <code>values</code> <code>list[float]</code> <p>A list of reaction times (for \"timecourse\" mode) or concentrations (for \"calibration\" mode), corresponding to each measurement in the directory.</p> <code>None</code> <code>unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the <code>values</code> provided. It can be the time unit for reaction times or the concentration unit for calibration mode, depending on the mode.</p> <code>None</code> <code>id</code> <code>str</code> <p>Unique identifier of the Handler object. If not provided, the <code>path</code> is used as ID.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the measurement. Defaults to \"Chromatographic measurement\".</p> <code>'Chromatographic measurement'</code> <code>silent</code> <code>bool</code> <p>If True, no success message is printed. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Handler</code> <code>Handler</code> <p>Handler object containing the measurements.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.read_csv","title":"<code>read_csv(path, mode, ph, temperature, temperature_unit, retention_time_col_name, peak_area_col_name, id=None, values=None, unit=None, silent=False)</code>  <code>classmethod</code>","text":"<p>Reads chromatographic data from a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to the CSV file.</p> required <code>mode</code> <code>Literal['timecourse', 'calibration']</code> <p>Mode of the data.</p> required <code>values</code> <code>Optional[list[float]]</code> <p>List of values. Defaults to None.</p> <code>None</code> <code>unit</code> <code>Optional[UnitDefinitionAnnot]</code> <p>Unit of the values. Defaults to None.</p> <code>None</code> <code>ph</code> <code>float</code> <p>pH value of the measurement.</p> required <code>temperature</code> <code>float</code> <p>Temperature of the measurement.</p> required <code>temperature_unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the temperature.</p> required <code>retention_time_col_name</code> <code>str</code> <p>Name of the retention time column.</p> required <code>peak_area_col_name</code> <code>str</code> <p>Name of the peak area column.</p> required <code>id</code> <code>str</code> <p>Unique identifier of the Handler object. If not provided, the <code>path</code> is used as ID.</p> <code>None</code> <code>silent</code> <code>bool</code> <p>If True, no success message is printed. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Handler</code> <code>Handler</code> <p>Handler object containing the measurements.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.read_shimadzu","title":"<code>read_shimadzu(path, ph, temperature, temperature_unit='Celsius', mode=None, values=None, unit=None, id=None, name='Chromatographic measurement', silent=False)</code>  <code>classmethod</code>","text":"<p>Reads chromatographic data from a directory containing Shimadzu files. Measurements are assumed to be named alphabetically, allowing sorting by file name.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to the directory containing the Shimadzu files.</p> required <code>ph</code> <code>float</code> <p>pH value of the measurement.</p> required <code>temperature</code> <code>float</code> <p>Temperature of the measurement.</p> required <code>temperature_unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the temperature. Defaults to Celsius (C).</p> <code>'Celsius'</code> <code>mode</code> <code>Optional[Literal['timecourse', 'calibration']]</code> <p>Mode of the data. If \"timecourse\", <code>values</code> should be a list of reaction times. If \"calibration\", <code>values</code> should be a list of concentrations. Defaults to None.</p> <code>None</code> <code>values</code> <code>list[float]</code> <p>A list of reaction times (for \"timecourse\" mode) or concentrations (for \"calibration\" mode), corresponding to each measurement in the directory.</p> <code>None</code> <code>unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the <code>values</code> provided. It can be the time unit for reaction times or the concentration unit for calibration mode, depending on the mode.</p> <code>None</code> <code>id</code> <code>str</code> <p>Unique identifier of the Handler object. If not provided, the <code>path</code> is used as ID.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the measurement. Defaults to \"Chromatographic measurement\".</p> <code>'Chromatographic measurement'</code> <code>silent</code> <code>bool</code> <p>If True, no success message is printed. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Handler</code> <code>Handler</code> <p>Handler object containing the measurements.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.read_thermo","title":"<code>read_thermo(path, ph, temperature, temperature_unit='Celsius', mode=None, values=None, unit=None, id=None, name='Chromatographic measurement', silent=False)</code>  <code>classmethod</code>","text":"<p>Reads chromatographic data from a directory containing Thermo Scientific TX0 files. Measurements are assumed to be named alphabetically, allowing sorting by file name.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to the directory containing the TX0 files.</p> required <code>ph</code> <code>float</code> <p>pH value of the measurement.</p> required <code>temperature</code> <code>float</code> <p>Temperature of the measurement.</p> required <code>temperature_unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the temperature. Defaults to Celsius (C).</p> <code>'Celsius'</code> <code>mode</code> <code>Optional[Literal['timecourse', 'calibration']]</code> <p>Mode of the data. If \"timecourse\", <code>values</code> should be a list of reaction times. If \"calibration\", <code>values</code> should be a list of concentrations. Defaults to None.</p> <code>None</code> <code>values</code> <code>list[float]</code> <p>A list of reaction times (for \"timecourse\" mode) or concentrations (for \"calibration\" mode), corresponding to each measurement in the directory.</p> <code>None</code> <code>unit</code> <code>UnitDefinitionAnnot</code> <p>Unit of the <code>values</code> provided. It can be the time unit for reaction times or the concentration unit for calibration mode, depending on the mode.</p> <code>None</code> <code>id</code> <code>str</code> <p>Unique identifier of the Handler object. If not provided, the <code>path</code> is used as ID.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the measurement. Defaults to \"Chromatographic measurement\".</p> <code>'Chromatographic measurement'</code> <code>silent</code> <code>bool</code> <p>If True, no success message is printed. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Handler</code> <code>Handler</code> <p>Handler object containing the measurements.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.rich_display","title":"<code>rich_display(console=None, debug=False)</code>","text":"<p>Display a comprehensive rich text visualization of the Handler instance.</p> <p>This method provides a beautiful, structured overview of the Handler including: - Basic information (ID, name, mode) - Molecules and their properties - Proteins and their properties - Measurements summary with peak statistics - Chromatogram details</p> <p>Parameters:</p> Name Type Description Default <code>console</code> <code>Console | None</code> <p>Rich console instance. If None, creates a new one. Defaults to None.</p> <code>None</code> <code>debug</code> <code>bool</code> <p>If True, shows debug information about what sections are being displayed. Defaults to False.</p> <code>False</code>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.set_dilution_factor","title":"<code>set_dilution_factor(dilution_factor)</code>","text":"<p>Sets the dilution factor for all measurements.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.to_enzymeml","title":"<code>to_enzymeml(name, calculate_concentration=True, extrapolate=False)</code>","text":"<p>Creates an EnzymeML document from the data in the Handler.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the EnzymeML document.</p> required <code>calculate_concentration</code> <code>bool</code> <p>If True, the concentrations of the species are calculated. Defaults to True.</p> <code>True</code> <code>extrapolate</code> <code>bool</code> <p>If True, the concentrations are extrapolated to if the measured peak areas are outside the calibration range. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>EnzymeMLDocument</code> <code>EnzymeMLDocument</code> <p>description</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.to_json","title":"<code>to_json(path)</code>","text":"<p>Serialize the instance to a JSON file. Parameters:     path (str | Path): The file path where the JSON data will be saved.                         If the parent directory does not exist, it will be created. Returns:     None: This method does not return a value. It writes the instance's     attributes to a JSON file at the specified path.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.visualize","title":"<code>visualize(n_cols=2, figsize=(15, 10), show_peaks=True, show_processed=False, rt_min=None, rt_max=None, save_path=None, assigned_only=False, overlay=False)</code>","text":"<p>Creates a matplotlib figure with subplots for each measurement.</p> <p>Parameters:</p> Name Type Description Default <code>n_cols</code> <code>int</code> <p>Number of columns in the subplot grid. Defaults to 2.</p> <code>2</code> <code>figsize</code> <code>tuple[float, float]</code> <p>Figure size in inches (width, height). Defaults to (15, 10).</p> <code>(15, 10)</code> <code>show_peaks</code> <code>bool</code> <p>If True, shows detected peaks. Defaults to True.</p> <code>True</code> <code>show_processed</code> <code>bool</code> <p>If True, shows processed signal. Defaults to False.</p> <code>False</code> <code>rt_min</code> <code>float | None</code> <p>Minimum retention time to display. If None, shows all data. Defaults to None.</p> <code>None</code> <code>rt_max</code> <code>float | None</code> <p>Maximum retention time to display. If None, shows all data. Defaults to None.</p> <code>None</code> <code>save_path</code> <code>str | None</code> <p>Path to save the figure. If None, the figure is not saved. Defaults to None.</p> <code>None</code> <code>assigned_only</code> <code>bool</code> <p>If True, only shows peaks that are assigned to a molecule. Defaults to False.</p> <code>False</code> <code>overlay</code> <code>bool</code> <p>If True, plots all chromatograms on a single axis. Defaults to False.</p> <code>False</code>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.visualize_all","title":"<code>visualize_all(assigned_only=False, dark_mode=False, show=False)</code>","text":"<p>Plots the fitted peaks of the chromatograms in an interactive figure.</p> <p>Parameters:</p> Name Type Description Default <code>assigned_only</code> <code>bool</code> <p>If True, only the peaks that are assigned to a molecule are plotted. Defaults to False.</p> <code>False</code> <code>dark_mode</code> <code>bool</code> <p>If True, the figure is displayed in dark mode. Defaults to False.</p> <code>False</code> <code>show</code> <code>bool</code> <p>If True, shows the figure. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure object.</p>"},{"location":"api_reference/handler/#chromhandler.handler.Handler.visualize_spectra","title":"<code>visualize_spectra(dark_mode=False)</code>","text":"<p>Plots all chromatograms in the Handler in a single plot.</p> <p>Parameters:</p> Name Type Description Default <code>dark_mode</code> <code>bool</code> <p>If True, the figure is displayed in dark mode. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure object.</p>"},{"location":"api_reference/molecule/","title":"Molecule","text":""},{"location":"api_reference/molecule/#documentation-for-molecule","title":"Documentation for <code>Molecule</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api_reference/molecule/#chromhandler.molecule.Molecule.has_retention_time","title":"<code>has_retention_time</code>  <code>property</code>","text":"<p>Checks if the molecule has a retention time defined. And if so, it is assumed that the molecule is present in the chromatogram.</p>"},{"location":"api_reference/molecule/#chromhandler.molecule.Molecule.create_standard","title":"<code>create_standard(areas, concs, conc_unit, ph, temperature, temp_unit='Celsius', visualize=True)</code>","text":"<p>Creates a linear standard from the molecule's calibration data.</p> <p>Parameters:</p> Name Type Description Default <code>areas</code> <code>list[float]</code> <p>The areas of the molecule.</p> required <code>concs</code> <code>list[float]</code> <p>The concentrations of the molecule.</p> required <code>conc_unit</code> <code>UnitDefinition</code> <p>The unit of the concentration.</p> required <code>ph</code> <code>float</code> <p>The pH of the solution.</p> required <code>temperature</code> <code>float</code> <p>The temperature of the solution.</p> required <code>temp_unit</code> <code>UnitDefinition</code> <p>The unit of the temperature.</p> <code>'Celsius'</code> <code>visualize</code> <code>bool</code> <p>Whether to visualize the standard.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Calibration</code> <code>Calibration</code> <p>The created Calibration instance.</p>"},{"location":"api_reference/molecule/#chromhandler.molecule.Molecule.from_standard","title":"<code>from_standard(standard, init_conc, conc_unit)</code>  <code>classmethod</code>","text":"<p>Creates a Molecule instance from a Calibration instance.</p> <p>Parameters:</p> Name Type Description Default <code>standard</code> <code>Calibration</code> <p>The calibration instance to create the molecule from.</p> required <code>init_conc</code> <code>float</code> <p>The initial concentration of the molecule.</p> required <code>conc_unit</code> <code>UnitDefinition</code> <p>The unit of the concentration.</p> required <p>Returns:</p> Name Type Description <code>Molecule</code> <code>Molecule</code> <p>The created Molecule instance.</p>"},{"location":"api_reference/molecule/#chromhandler.molecule.Molecule.read_json","title":"<code>read_json(path)</code>  <code>classmethod</code>","text":"<p>Creates a Molecule instance from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Name Type Description <code>Molecule</code> <code>Molecule</code> <p>The created Molecule instance.</p>"},{"location":"api_reference/molecule/#chromhandler.molecule.Molecule.save_json","title":"<code>save_json(path)</code>","text":"<p>Saves the Molecule instance to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api_reference/protein/","title":"Protein","text":""},{"location":"api_reference/protein/#documentation-for-protein","title":"Documentation for <code>Protein</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api_reference/protein/#chromhandler.protein.Protein.ld_id_url","title":"<code>ld_id_url</code>  <code>property</code>","text":"<p>Returns the URL of the UniProt page of the protein based on the protein ID</p> <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: URL of the UniProt page of the protein if the protein ID is defined, None otherwise.</p>"},{"location":"api_reference/protein/#chromhandler.protein.Protein.from_uniprot","title":"<code>from_uniprot(uniprot_id, name=None)</code>  <code>classmethod</code>","text":"<p>Creates a Protein instance from a UniProt ID using the UniProt API.</p> <p>Parameters:</p> Name Type Description Default <code>uniprot_id</code> <code>str</code> <p>The UniProt accession or entry name.</p> required <p>Returns:</p> Name Type Description <code>Protein</code> <code>Protein</code> <p>The created Protein instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the UniProt entry cannot be found or parsed.</p>"},{"location":"api_reference/protein/#chromhandler.protein.Protein.read_json","title":"<code>read_json(path)</code>  <code>classmethod</code>","text":"<p>Creates a Protein instance from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Name Type Description <code>Protein</code> <code>Protein</code> <p>The created Protein instance.</p>"},{"location":"api_reference/protein/#chromhandler.protein.Protein.save_json","title":"<code>save_json(path)</code>","text":"<p>Saves the Protein instance to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"getting_started/calibrator/","title":"Calibrator","text":"<p>A <code>Calibrator</code> can be created by reading data from multiple measurements. After defining the calibration object, which is specific to a measured species, the calibrator can be used to calculate the concentration of peaks of the same species.</p> <p>First, the data is read in, and the peaks from which the calibration object should be created are assigned to a species. <pre><code>from chromatopy.tools import ChromAnalyzer, Calibrator\n\ncalibration_path = \"path/to/calibration/data\"\n\n# read in data from path\ncalibration_analyzer = ChromAnalyzer.read_data(calibration_path)\n\n# Get peaks of the species to create calibration curve\noxalac = calib_analyzer.add_species(\n    name=\"Oxaloacetate\", retention_time=21.35, chebi=chebi_oxaloacetate\n)\n</code></pre></p> <p>After defining the species, the calibration object can be created by specifying the concentrations of the measured species. <pre><code># Define concentrations and corresponding unit\nconcentrations = [0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nconc_unit = \"mmol/L\"\n\n# Create a calibrator for the substrate\nsubstrate_calibrator = Calibrator.from_species(\n    species=substrate_species, concentrations=concentrations, conc_unit=conc_unit\n)\n\n# Plot the calibration curve\nsubstrate_calibrator.plot()\n</code></pre></p>"},{"location":"getting_started/calibrator/#defining-a-calibrator-without-measured-species","title":"Defining a calibrator without measured species","text":"<p>Alternatively, a calibrator can be created without defining a species. In this case, the species is not observed in the chromatogram, but the slope is provided. <pre><code>product_calibrator = Calibrator(\n    name=\"Citrate\", slope=199030, conc_unit=\"mmol/L\", chebi=12345\n)\n</code></pre></p>"},{"location":"getting_started/calibrator/#calculating-concentrations","title":"Calculating concentrations","text":"<p>After defining the calibrator, the calibrator can be added to a <code>ChromAnalyzer</code> by adding it with the <code>add_calibrator</code> method. </p> <pre><code>analyzer.add_calibrator(substrate_calibrator)\n</code></pre> <p>The added calibrators are then used to calculate concentrations of the peaks, which share the same <code>chebi_id</code> or the same <code>name</code> attribute as the calibrator.</p> <p>In this way, a <code>DataFrame</code> with the calculated concentrations can be obtained by using the <code>calculate_concentrations</code> method. <pre><code>df = analyzer._create_df()\n</code></pre></p>"},{"location":"getting_started/calibrator/#next-step","title":"Next step","text":"<p>In the next development steps, instead of yielding a <code>DataFrame</code>, the results are mapped to <code>EnzymeML</code>, allowing to store the results in a standardized format and apply further analysis steps.</p>"},{"location":"getting_started/read_in/","title":"Read in","text":"<p>Chromatopy can currently read data from Shimadzu chromatographic system. In the future, it will be able to read data from Agilent and Thermo Fischer chromatographic systems as well. The tool is designed to efficiently handle data from time-course experiments, where multiple samples are analyzed in a sequence.</p> <p>The <code>ChromAnalyzer</code> is the central object to read and process chromatographic data. The scope of one <code>ChromAnalyzer</code> instance is one sample which is measured over time</p>"},{"location":"getting_started/read_in/#reading-data","title":"Reading data","text":"<p>Data can be read by using the <code>read_data</code> method. Thereby, the path to a directory, or to a file can be passed. The method will automatically detect the file format and read the data accordingly.</p> <pre><code>from chromatopy.tools import ChromAnalyzer\n\npath = \"path/to/data\"\nanalyzer = ChromAnalyzer.read_data(calibration_path)\n</code></pre>"},{"location":"getting_started/read_in/#visualization-of-raw-data","title":"Visualization of raw data","text":"<p>The raw data can be visualized by using the <code>plot_measurements</code> method. The method will plot the raw chromatograms of the samples.</p> <pre><code>analyzer.plot_measurements()\n</code></pre>"},{"location":"getting_started/read_in/#assigning-measurement-conditions","title":"Assigning measurement conditions","text":"<p>The <code>add_species</code> method allows to assign information on the measured species to the <code>ChromAnalyzer</code> object. In this way peaks of a given retention time can be assigned, or the concentration of protein sequence of a catalyst can be added to the <code>ChromAnalyzer</code>.</p>"},{"location":"getting_started/read_in/#adding-measurement-conditions-to-peaks","title":"Adding measurement conditions to peaks","text":"<p>By specifying setting the <code>retention_time</code> attribute, the <code>add_species</code> method can be used to assign a peak to a given species. Thereby, all peaks loaded to the analyzer will be extracted from the chromatogram and assigned to the species. Additionally, the <code>chebi_id</code> attribute can be set to assign a ChEBI identifier to the species. Furthermore, the <code>init_conc</code> and <code>conc_unit</code> can be specified. The corresponding reaction times of the species can be added by setting the <code>reaction_times</code> and <code>time_unit</code> attributes.</p> <pre><code>analyzer.add_species(\n    retention_time=10.5, \n    chebi_id=\"12345\", \n    init_conc=1, \n    conc_unit=\"mmol/l\"\n    reaction_times=[0, 10, 20],\n    time_unit=\"min\"\n)\n</code></pre>"},{"location":"getting_started/read_in/#adding-measurement-conditions-to-unobserved-species","title":"Adding measurement conditions to unobserved species","text":"<p>If a species is not observed in the chromatogram, the <code>add_species</code> method can be used to assign the species to the <code>ChromAnalyzer</code> object. In this way e.g. a protein catalyst can be defined by specifying either the <code>uniprot_id`` or the</code>sequence<code>attribute. Additionally, the</code>init_conc<code>and</code>conc_unit` can be specified.</p> <pre><code>analyzer.add_species(\n    name=\"Protein catalyst\", \n    uniprot_id=\"P12345\", \n    init_conc=1, \n    conc_unit=\"nmol/l\"\n)\n</code></pre>"},{"location":"usage/usage/","title":"2. Use chromhandler","text":"<p>The typical workflow with <code>chromhandler</code> consists of the following steps:</p> <ol> <li>Read calibration data of an external standard<ol> <li>Define measured analyte</li> <li>Create a <code>Calibrator</code> to get a model for later concentration calculation</li> <li>Save Molecule with calibration information for later use</li> </ol> </li> <li>Read time-course data<ol> <li>Define reaction conditions such as temperature and pH.</li> <li>Add previously saved Molecule with calibration information</li> <li>Export data as EnzymeML Document</li> </ol> </li> </ol> In\u00a0[1]: Copied! <pre>from chromhandler import Handler\n\n# define directory with calibration data\ndir_SIH = \"data/calibration/SAH/allotrope\"\n\n# read calibration data\nhandler_substrate = Handler.read_asm(\n    path=dir_SIH,\n    ph=7.4,\n    temperature=37,\n    mode=\"calibration\",\n)\n\n# define S-adenosyl-L-homocysteine (SAH)\nSAH = handler_substrate.define_molecule(\n    id=\"SAH\",\n    pubchem_cid=\"439155\",\n    retention_time=8.1,\n)\n\n# assign peaks to molecules\nhandler_substrate.assign_all_peaks()\n\n# visualize calibration data\nhandler_substrate.visualize(n_cols=3, rt_min=7, rt_max=10, figsize=(12, 6))\n\n# fit SAH peaks to linear model\nhandler_substrate.add_standard(\n    molecule=SAH,\n    visualize=True,\n)\n\n# save SAH molecule for re-use as json file\nSAH.save_json(\"data/calibration/SAH.json\")\n</pre> from chromhandler import Handler  # define directory with calibration data dir_SIH = \"data/calibration/SAH/allotrope\"  # read calibration data handler_substrate = Handler.read_asm(     path=dir_SIH,     ph=7.4,     temperature=37,     mode=\"calibration\", )  # define S-adenosyl-L-homocysteine (SAH) SAH = handler_substrate.define_molecule(     id=\"SAH\",     pubchem_cid=\"439155\",     retention_time=8.1, )  # assign peaks to molecules handler_substrate.assign_all_peaks()  # visualize calibration data handler_substrate.visualize(n_cols=3, rt_min=7, rt_max=10, figsize=(12, 6))  # fit SAH peaks to linear model handler_substrate.add_standard(     molecule=SAH,     visualize=True, )  # save SAH molecule for re-use as json file SAH.save_json(\"data/calibration/SAH.json\") <pre>Loaded 6 chromatograms.\n</pre> <pre>             \ud83c\udfaf Peak Assignment Summary of allotrope              \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Molecule                   \u2503   Status   \u2503 Details              \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 SAH (Adenosylhomocysteine) \u2502 \u2705 Success \u2502 (6/6) peaks assigned \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre></pre> <pre>\u2705 Models have been successfully fitted.\n</pre> <pre>                                         Model Overview                                         \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Model Name \u2503 AIC \u2503 R squared \u2503 RMSD          \u2503 Equation \u2503 Relative Parameter Standard Errors \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 linear     \u2502 218 \u2502 0.999     \u2502 64871367.9893 \u2502 SAH * a  \u2502 a: 1.0%,                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre></pre> <p>The same procedure is repeated for the Adenosine (Ado) calibration data.</p> In\u00a0[2]: Copied! <pre># define directory with calibration data\ndir_SIH = \"data/calibration/adenosine/allotrope\"\n\n# read calibration data\nhandler_product = Handler.read_asm(\n    path=dir_SIH, ph=7.4, temperature=37, mode=\"calibration\"\n)\n\n\n# define S-adenosyl-L-homocysteine (SAH)\nAdo = handler_product.define_molecule(\n    id=\"Ado\",\n    pubchem_cid=\"60961\",\n    retention_time=7.8,\n    retention_tolerance=0.05,\n)\n\nhandler_product.assign_all_peaks()\n\n# visualize calibration data\nhandler_product.visualize(n_cols=3, figsize=(12, 6), rt_min=5, rt_max=10)\n\n# fit SAH peaks to linear model\nhandler_product.add_standard(\n    molecule=Ado,\n    visualize=True,\n)\n\n# save SAH molecule for re-use as json file\nAdo.save_json(\"data/calibration/Adenosine.json\")\n</pre> # define directory with calibration data dir_SIH = \"data/calibration/adenosine/allotrope\"  # read calibration data handler_product = Handler.read_asm(     path=dir_SIH, ph=7.4, temperature=37, mode=\"calibration\" )   # define S-adenosyl-L-homocysteine (SAH) Ado = handler_product.define_molecule(     id=\"Ado\",     pubchem_cid=\"60961\",     retention_time=7.8,     retention_tolerance=0.05, )  handler_product.assign_all_peaks()  # visualize calibration data handler_product.visualize(n_cols=3, figsize=(12, 6), rt_min=5, rt_max=10)  # fit SAH peaks to linear model handler_product.add_standard(     molecule=Ado,     visualize=True, )  # save SAH molecule for re-use as json file Ado.save_json(\"data/calibration/Adenosine.json\") <pre>Loaded 6 chromatograms.\n</pre> <pre>          \ud83c\udfaf Peak Assignment Summary of allotrope           \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Molecule             \u2503   Status   \u2503 Details              \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Ado (Adenosine)      \u2502 \u2705 Success \u2502 (6/6) peaks assigned \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre></pre> <pre>\u2705 Models have been successfully fitted.\n</pre> <pre>                                         Model Overview                                         \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Model Name \u2503 AIC \u2503 R squared \u2503 RMSD          \u2503 Equation \u2503 Relative Parameter Standard Errors \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 linear     \u2502 198 \u2502 1.0       \u2502 12256879.6314 \u2502 Ado * a  \u2502 a: 0.2%,                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre></pre> In\u00a0[3]: Copied! <pre>from chromatopy import Molecule, to_enzymeml\nimport pyenzyme as pe\n\n# Load SAH molecule from json file\nSAH_path = \"data/calibration/SAH.json\"\nSAH = Molecule.read_json(SAH_path)\nSAH.retention_time = 8.2\nSAH.retention_tolerance = 0.2\n\n\n# load Ado molecule from json file\nAdo_path = \"data/calibration/Adenosine.json\"\nAdo = Molecule.read_json(Ado_path)\nAdo.retention_time = 7.84\nAdo.retention_tolerance = 0.05\n\n# load reaction data\ndata_dir = \"data/reaction/CE6\"\nhandler = Handler.read_asm(path=data_dir, ph=7.4, temperature=37, mode=\"timecourse\")\n\n# add SAH and Ado molecules to analyzer\nhandler.add_molecule(SAH, init_conc=225, conc_unit=\"umol/l\")\nhandler.add_molecule(Ado, init_conc=0, conc_unit=\"umol/l\")\n\n# define enzyme\nhandler.define_protein(\n    id=\"Q80SW1\",\n    name=\"SAH Hydrolase\",\n    init_conc=0.05,\n    conc_unit=\"umol/l\",\n)\n\n# assign peaks to molecules\nhandler.assign_all_peaks()\n\n# visualize chromatogram\nhandler.visualize(\n    n_cols=1,\n    rt_min=7.5,\n    rt_max=9.5,\n    figsize=(10, 15),\n    assigned_only=True,\n)\n\n# export data as EnzymeML Document\nenzyme_ml = to_enzymeml(\n    handlers=[handler],\n    document_name=\"SAH Hydrolysis assay\",\n    calculate_concentration=True,\n    extrapolate=False,\n)\n\n# save EnzymeML Document to file\npe.write_enzymeml(enzyme_ml, \"data/reaction/SAH Hydrolysis assay.json\")\n</pre> from chromatopy import Molecule, to_enzymeml import pyenzyme as pe  # Load SAH molecule from json file SAH_path = \"data/calibration/SAH.json\" SAH = Molecule.read_json(SAH_path) SAH.retention_time = 8.2 SAH.retention_tolerance = 0.2   # load Ado molecule from json file Ado_path = \"data/calibration/Adenosine.json\" Ado = Molecule.read_json(Ado_path) Ado.retention_time = 7.84 Ado.retention_tolerance = 0.05  # load reaction data data_dir = \"data/reaction/CE6\" handler = Handler.read_asm(path=data_dir, ph=7.4, temperature=37, mode=\"timecourse\")  # add SAH and Ado molecules to analyzer handler.add_molecule(SAH, init_conc=225, conc_unit=\"umol/l\") handler.add_molecule(Ado, init_conc=0, conc_unit=\"umol/l\")  # define enzyme handler.define_protein(     id=\"Q80SW1\",     name=\"SAH Hydrolase\",     init_conc=0.05,     conc_unit=\"umol/l\", )  # assign peaks to molecules handler.assign_all_peaks()  # visualize chromatogram handler.visualize(     n_cols=1,     rt_min=7.5,     rt_max=9.5,     figsize=(10, 15),     assigned_only=True, )  # export data as EnzymeML Document enzyme_ml = to_enzymeml(     handlers=[handler],     document_name=\"SAH Hydrolysis assay\",     calculate_concentration=True,     extrapolate=False, )  # save EnzymeML Document to file pe.write_enzymeml(enzyme_ml, \"data/reaction/SAH Hydrolysis assay.json\") <pre>Loaded 7 chromatograms.\n</pre> <pre>/var/folders/qj/km84d2qd1c7dcj181088k7lh0000gn/T/ipykernel_49622/2166189667.py:1: DeprecationWarning: 'chromatopy' is deprecated; switch to 'chromhandler'. This alias disappears in v1.0.\n  from chromatopy import Molecule, to_enzymeml\n</pre> <pre>                \ud83c\udfaf Peak Assignment Summary of CE6                 \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Molecule                   \u2503   Status   \u2503 Details              \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 SAH (Adenosylhomocysteine) \u2502 \u2705 Success \u2502 (7/7) peaks assigned \u2502\n\u2502 Ado (Adenosine)            \u2502 \u2705 Success \u2502 (7/7) peaks assigned \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <pre></pre> <pre>\n  EnzymeML document written to data/reaction/SAH Hydrolysis assay.json\n\n</pre> <p>As a result, the EnzymeML Document contains the aggregated concentration data of the peaks of interest and can be plotted with pyenzyme.</p> In\u00a0[4]: Copied! <pre>import pyenzyme as pe\n\nfig, ax = pe.plot(enzyme_ml)\n</pre> import pyenzyme as pe  fig, ax = pe.plot(enzyme_ml) <pre></pre>"},{"location":"usage/usage/#the-handler-class","title":"The Handler class\u00b6","text":"<p>The <code>Handler</code> of <code>chromhandler</code> provides several methods for reading chromatographic data from various, adding and defining molecules, that allow extraction and processing of data. Information on a molecule is defined in regard to the intent of the measurement. This means that besides a molecule's name, its retention time, the initial concentration and respective unit are also added for time-course measurements.</p>"},{"location":"usage/usage/#read-data","title":"Read Data\u00b6","text":"<p>Each of the supported file formats has a corresponding reader function, namely <code>read_asm</code>, <code>read_agilent</code>, <code>read_chromeleon</code>, and <code>read_shimadzu</code>. Following arguments are common to all reader functions:</p> <p>Required Parameters:</p> <ul> <li><code>path</code>: The path to the directory containing the chromatographic files.</li> <li><code>ph</code>: The pH value of the measurement.</li> <li><code>temperature</code>: The temperature of the measurement.</li> <li><code>mode</code>: The mode of the measurement, either <code>calibration</code> or <code>timecourse</code>.</li> </ul> <p>Optional Parameters:</p> <ul> <li><code>id</code>: A unique identifier for the <code>Handler</code> object. If not provided, the <code>path</code> is used as the ID.</li> <li><code>name</code>: The name of the measurement. Defaults to \"Chromatographic measurement\".</li> <li><code>values</code>: A list of reaction times corresponding to each file in the directory for timecourse measurements or concentrations for calibration measurements. If not provided, reaction times are extracted from file names when possible.</li> <li><code>time_unit</code>: The unit of the time values <code>second</code>, <code>minute</code>, and <code>hour</code>, which can directly be imported from chromatopy. This is also optional if the unit is part of the file names.</li> <li><code>temperature_unit</code>: The unit of the temperature. The default is Celsius (C).</li> </ul> <p>Returns:</p> <ul> <li>Returns a <code>Handler</code> object, which can be used to further analyze and manipulate the chromatographic data.</li> </ul> <p>Automatic Extraction from File Names</p> <p><code>chromhandler</code> can automatically extract the reaction time and time unit or concentration values and concentration unit directly from the file names. This is particularly useful when files are named in a way that includes this information (e.g., <code>sample_10min.txt</code>, <code>a11 3.45 hours.json</code>, or <code>B02_35_sec.json</code>). However, this requires the file names to follow a specific format that <code>chromhandler</code> can recognize: It is assumed that the reaction time is the first numerical value which might have a decimal separator, followed by the name of the unit <code>sec</code>, <code>second</code>, <code>min</code>, <code>minute</code>, or <code>hour</code>. For concentration values, the first numerical value is assumed to be the concentration, followed by the name of the unit <code>mM</code>, <code>uM</code>, <code>nM</code>. If the file names do not follow this format, values and units need to be provided manually.</p>"},{"location":"usage/usage/#define-molecules","title":"Define Molecules\u00b6","text":"<p>Molecules are defined using the <code>define_molecule</code> method. It adds a molecule to the list of molecules within the <code>Handler</code> object. This method requires several parameters, including the internal identifier, PubChem CID, and retention time, among others.</p> <p>Required parameters:</p> <ul> <li><code>id</code>: Internal identifier of the molecule, such as <code>s0</code>, <code>ABTS</code> or <code>A0_34S</code>.</li> <li><code>pubchem_cid</code>: PubChem CID of the molecule.</li> <li><code>retention_time</code>: Retention time for peak annotation in minutes. If the molecule is not detected in the chromatogram, the retention time can be set to <code>None</code>.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>init_conc</code>: Initial concentration of the molecule. Defaults to <code>None</code></li> <li><code>conc_unit</code>: Unit of the concentration. Defaults to <code>None</code>.</li> <li><code>name</code>: Name of the molecule. If not provided, the name is retrieved from the PubChem database. Defaults to <code>None</code>.</li> <li><code>retention_tolerance</code>: Retention time tolerance for peak annotation in minutes. Defaults to <code>0.1</code>.</li> <li><code>wavelength</code>: Wavelength of the detector on which the molecule was detected. Defaults to <code>None</code>.</li> </ul> <p>Returns:</p> <ul> <li>The method returns a <code>Molecule</code> object that is added to the <code>molecules</code> list within the <code>Handler</code> object.</li> </ul> <p>How it works:</p> <p>Once the molecule is defined, all peaks within the chromatographic data that match the retention time within the specified tolerance are annotated with the molecule's <code>id</code>, hence allowing for further analysis and processing of the data. This happens in the background. In the following assignment of a substrate and product molecule of a kinetic measurement is shown.</p>"},{"location":"usage/usage/#process-calibration-data","title":"Process calibration data\u00b6","text":"<p>In this example, an enzymatic reaction is analyzed: S-adenosyl-L-homocysteine (SAH) is converted to Adenosine (Ado) by an SAH hydrolase. For both molecules, calibration measurements in the range from 25 \u00b5M to 800 \u00b5M were performed. In the following cells, the calibration data for both molecules is read in, visualized, and <code>Molecule</code> objects, containing the calibration information, are created for subsequent use with time-course data.</p>"},{"location":"usage/usage/#external-standard","title":"External Standard\u00b6","text":"<p>Besides kinetic data, the <code>Handler</code> can also be used to analyze calibration measurements and create standards for the quantification of molecules. The <code>add_standard</code> method adds fits a linear regression to the peaks which are assigned to a molecule and the provided concentrations.</p> <p>Required parameters:</p> <ul> <li><code>molecule</code>: The molecule for which the standard curve is being generated. This should be an instance of a molecule previously defined in the system.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>visualize</code>: A boolean parameter that, if set to <code>True</code>, generates a plot of the standard curve for visualization. This is useful for confirming the accuracy of the calibration process.</li> </ul> <p>How it works: Upon calling the <code>add_standard</code> method, the provided concentrations from the filenames of the individual chromatograms are used to fit a linear model with one parameter. The linear relationship between the concentration of $\\text{Ana}$ and its peak area is defined by the equation:</p> <p>$$ A_{\\text{Molecule}} = a \\times C_{\\text{Molecule}} $$</p> <p>Where:</p> <ul> <li>$A_{\\text{Molecule}}$: Peak area of $\\text{Molecule}$.</li> <li>$C_{\\text{Molecule}}$: Concentration of $\\text{Molecule}$.</li> <li>$a$: Slope of the calibration curve, representing the sensitivity or response factor of $\\text{Molecule}$.</li> </ul> <p>The linear model including information on the valid calibration range is stored in the <code>standard</code> attribute of the <code>Molecule</code> object and can later be used for quantification of the molecule from time-course measurements.</p>"},{"location":"usage/usage/#process-reaction-data","title":"Process reaction data\u00b6","text":"<p>Processing of reaction data is similar to the processing of calibration data. The only difference is that the <code>mode</code> parameter is set to <code>timecourse</code>. Now the previously defined <code>Molecule</code> objects for <code>SAH</code> and <code>Ado</code> are added to the <code>ChromAnalyzer</code> object.</p> <p>Adding Molecules After loading the <code>Molecule</code> objects from the json files, the retention time and retention tolerance can be adjusted, if necessary.</p> <p>Instead of defining the <code>Molecule</code> objects again, the <code>Molecule</code> is added via the <code>add_molecule</code> method. This method allows to set the initial concentration of the molecule and the respective unit.</p> <p>Defining the Protein Similar to the <code>Molecule</code> objects, the <code>Protein</code> object is defined using the <code>define_protein</code> method.</p> <p>Converting to EnzymeML The <code>to_enzymeml</code> function converts the <code>ChromAnalyzer</code> object to an EnzymeML Document. The method allows to combine the aggregated data of multiple <code>ChromAnalyzer</code> objects into a single EnzymeML Document. Thus the <code>analyzers</code> parameter is a list of <code>ChromAnalyzer</code> objects. Furthermore, the <code>calculate_concentration</code> parameter is set to <code>True</code> by default, which means that the concentration of the molecules is calculated from the peak area using the calibration curve. The <code>extrapolate</code> parameter is set to <code>False</code> by default, so concentrations are not extrapolated beyond the calibration range.</p>"}]}